@using System.Globalization
@model MobileBgWatch.ViewModels.VehicleViewModel

@{
    bool isVehicleNew = (Model.DateAdded.Date >= DateTime.UtcNow.Date.AddHours(-12));
}
<div class="d-flex flex-wrap justify-content-center">
    <div class="col-md-6" id="left">
        <div class="carousel-container">
            <div class="carousel slide" id="carousel-main" data-bs-wrap="true">
                <div class="border-top carousel-inner">
                    @Html.Raw(isVehicleNew ? "<img src=\"/images/new.png\" class=\"new-flag\" />" : "")
                    <div class="carousel-item active">
                        <img class="carousel-image" src="@Model.ImageUrls.FirstOrDefault()" onclick="showImageModal(this.src)" />
                    </div>
                    @foreach (string imageUrl in Model.ImageUrls.Skip(1))
                    {
                        <div class="carousel-item ">
                            <img class="carousel-image" src="@imageUrl" onclick="showImageModal(this.src)" />
                        </div>
                    }
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#carousel-main" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon"></span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#carousel-main" data-bs-slide="next">
                    <span class="carousel-control-next-icon"></span>
                </button>
                <div class="border-top carousel-indicators">
                    <button type="button" class="active" data-bs-target="#carousel-main" data-bs-slide-to="0">
                        <img src="@Model.ImageUrls.FirstOrDefault()" />
                    </button>
                    @for (int i = 1; i < Model.ImageUrls.Count; i++)
                    {
                        <button type="button" data-bs-target="#carousel-main" data-bs-slide-to="@i">
                            <img src="@Model.ImageUrls[i]" />
                        </button>
                    }
                </div>
            </div>
        </div>
        <div class="carousel-indicators-placeholder"></div>
    </div>

    <div class="col-md-6" id="right">
        <div class="border-top info-container custom-margin">
            <div class="adName">
                @Model.Name
            </div>
            <div class="location">
                <i class="fa-solid fa-earth-europe"></i> @Model.Location
            </div>
            @{
                string currentPriceClass;
                string previousPriceClass;
                if (Model.PreviousPrice.Price != 0)
                {
                    currentPriceClass = Model.CurrentPrice.Price < Model.PreviousPrice?.Price ? "text-success" : "text-danger";
                    previousPriceClass = Model.CurrentPrice.Price < Model.PreviousPrice?.Price ? "text-danger" : "text-success";
                }
                else
                {
                    currentPriceClass = "text-success";
                    previousPriceClass = "text-danger";
                }
            }
            <div class="price_container_vehicle">
                <div class="item_current">
                    <i class="fa-solid fa-money-bill-wave @currentPriceClass"></i> Current price:
                    <span class="item_current_price @currentPriceClass">@Model.CurrentPrice.Price.ToString("N0", CultureInfo.InvariantCulture)</span>
                    <span class="item_current_currency @currentPriceClass">@Model.CurrentPrice.Currency</span>
                    <span class="date-and-vat">
                        <span class="item_date">(@Model.CurrentPrice.Date.ToString("dd/MM/yyyy")</span>
                        <span class="vat">@(Model.CurrentPrice.IncludeVat ? "- Цената е с включено ДДС)" : "- Не се начислява ДДС)")</span>
                    </span>

                </div>
                <div class="item_previous">
                    <i class="fa-solid fa-money-bill-wave @previousPriceClass"></i> Previous price:
                    <span class="item_previous_price @previousPriceClass">@Model.PreviousPrice.Price.ToString("N0", CultureInfo.InvariantCulture)</span>
                    <span class="item_previous_currency @previousPriceClass">@Model.PreviousPrice.Currency</span>
                    <span class="date-and-vat">
                        <span class="item_date">(@Model.PreviousPrice.Date.ToString("dd/MM/yyyy")</span>
                        <span class="vat">@(Model.PreviousPrice.IncludeVat ? "- Цената е с включено ДДС)" : "- Не се начислява ДДС)")</span>
                    </span>

                </div>
            </div>
            <div class="date-added">
                <i class="fa-solid fa-calendar-days"></i><span> Дата на добавяне в тракера: <span class="date-span">@Model.DateAdded.ToString("dd-MM-yyyy")</span></span>
            </div>
            <a class="text-decoration-none" href="@Model.Url" target="_blank">
                <i class="fa-solid fa-link"></i> <img class="mobilebg-logo" src="~/images/mobilebglogo.png" alt="@Model.Url" title="Отвори обявата" />
            </a>
            <div class="historic-prices">
                <i class="fa-solid fa-money-check"></i> <span class="span-historic-price">@(Model.HistoricalPrices.Count == 0 ? "Няма предишни цени в тракера." : "Предишни цени:")</span>
                @if (Model.HistoricalPrices.Count > 0)
                {
                    foreach (var price in Model.HistoricalPrices)
                    {
                        <li class="historic-price">
                            <span class="date-h-price">@price.Date.ToString("dd/MM/yyyy")</span> ➞ <span class="h-price"> @price.Price.ToString("N0", CultureInfo.InvariantCulture) @price.Currency</span>
                            <span class="vat">
                                @(
                                    price.IncludeVat ? "(Цената е с включено ДДС)" : "(Не се начислява ДДС)")
                            </span>
                        </li>
                    }
                }
            </div>
            <div class="specifications">
                <div class="spec-data">
                    <span class="spec-title">Технически спецификации</span><br>
                    <div class="specs">
                        @foreach (var spec in Model.Specifications)
                        {
                            <div class="spec">
                                <div>@spec.Key</div>
                                <div>@spec.Value</div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div id="vehiclePriceChart" style="width: 100%; height: 400px;"></div>
        </div>
    </div>
</div>

<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="carousel-control-prev modal-prev">&lt;</button>
                <img src="" id="modalImage" class="img-fluid mx-auto" />
                <button type="button" class="carousel-control-next modal-next">&gt;</button>
            </div>
        </div>
    </div>
</div>

<script>
    let currentImageIndex = 0;
    const imageUrls = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ImageUrls));

    function showImageModal(src) {
        currentImageIndex = imageUrls.indexOf(src);
        document.getElementById('modalImage').src = src;
        var imageModal = new bootstrap.Modal(document.getElementById('imageModal'));
        imageModal.show();
    }

    document.addEventListener('DOMContentLoaded', function () {
        const indicators = document.querySelector('.carousel-indicators');
        const placeholder = document.querySelector('.carousel-indicators-placeholder');

        function updatePlaceholderSize() {
            const indicatorsRect = indicators.getBoundingClientRect();
            placeholder.style.width = `${indicatorsRect.width}px`;
            placeholder.style.height = `${indicatorsRect.height}px`;
        }

        const resizeObserver = new ResizeObserver(updatePlaceholderSize);

        resizeObserver.observe(indicators);

        updatePlaceholderSize();

        document.querySelector('.modal-prev').addEventListener('click', function () {
            currentImageIndex = (currentImageIndex - 1 + imageUrls.length) % imageUrls.length;
            document.getElementById('modalImage').src = imageUrls[currentImageIndex];
        });

        document.querySelector('.modal-next').addEventListener('click', function () {
            currentImageIndex = (currentImageIndex + 1) % imageUrls.length;
            document.getElementById('modalImage').src = imageUrls[currentImageIndex];
        });
    });

    document.addEventListener('DOMContentLoaded', function () {
        const historicalPrices = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.HistoricalPrices));
        const currentPrice = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.CurrentPrice));

        const prices = historicalPrices.concat([currentPrice]).sort((a, b) => new Date(a.Date) - new Date(b.Date));

        const priceData = prices.map(price => [new Date(price.Date).getTime(), price.Price]);

        Highcharts.chart('vehiclePriceChart', {
            chart: {
                type: 'line',
                backgroundColor: '#333333',
                style: {
                    fontFamily: 'Arial, sans-serif'
                }
            },
            title: {
                text: 'Vehicle Price Over Time',
                style: {
                    color: '#E0E0E0'
                }
            },
            xAxis: {
                type: 'datetime',
                title: {
                    text: '<span style="font-weight:bold; font-size: 16px">Date</span>',
                    style: {
                        color: '#E0E0E0'
                    }
                },
                labels: {
                    style: {
                        color: '#E0E0E0'
                    },
                    formatter: function () {
                        return Highcharts.dateFormat('%e %b %Y', this.value);
                    }
                },
                lineColor: '#707070',
                tickColor: '#707070'
            },
            yAxis: {
                title: {
                    text: '<span style="font-weight:bold; font-size: 16px">Price</span>',
                    style: {
                        color: '#E0E0E0'
                    }
                },
                labels: {
                    style: {
                        color: '#E0E0E0'
                    },
                    formatter: function () {
                        return this.value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + ' ' + prices[0].Currency;
                    }
                },
                gridLineColor: '#707070'
            },
            legend: {
                itemStyle: {
                    color: '#E0E0E0'
                },
                itemHoverStyle: {
                    color: '#FFFFFF'
                }
            },
            series: [{
                name: 'Price',
                data: priceData,
                color: '#00adef'
            }],
            tooltip: {
                formatter: function () {
                    return `<br>${Highcharts.dateFormat('%e %b %Y', this.x)}<br>Price: ${this.y.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")} ${prices[0].Currency}`;
                }
            },
            credits: {
                enabled: false
            }
        });
    });
</script>
